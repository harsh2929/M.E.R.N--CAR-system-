This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-15T15:08:03.094Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
App.css
App.js
App.test.js
components/Layout.js
components/Notification.js
components/PrivateRoute.js
index.css
index.js
logo.svg
pages/AddCar.js
pages/CarCreatePage.js
pages/CarDetailPage.js
pages/CarEditPage.js
pages/CarListPage.js
pages/EditCar.js
pages/LoginPage.css
pages/LoginPage.js
pages/RegisterPage.css
pages/RegisterPage.js
reducers/authReducer.js
reducers/carReducer.js
reducers/notificationReducer.js
services/api.js
store/actions/authActions.js
store/actions/carActions.js
store/actions/notificationActions.js
store/index.js
store/reducers/authReducer.js
store/reducers/carReducer.js
store/reducers/notificationReducer.js
theme.js

================================================================
Repository Files
================================================================

================
File: App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: App.js
================
// src/App.js

import React from 'react';
import { Route, Switch, Redirect } from 'react-router-dom';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import CarListPage from './pages/CarListPage';
import CarDetailPage from './pages/CarDetailPage';
import CarCreatePage from './pages/CarCreatePage';
import CarEditPage from './pages/CarEditPage';
import PrivateRoute from './components/PrivateRoute';
import Layout from './components/Layout';
import Notification from './components/Notification';

function App() {
  return (
    <>
      <Switch>
        {/* Redirect root path to /login */}
        <Route exact path="/">
          <Redirect to="/login" />
        </Route>

        {/* Public Routes */}
        <Route exact path="/login" component={LoginPage} />
        <Route exact path="/register" component={RegisterPage} />

        {/* Private Routes */}
        <PrivateRoute path="/cars">
          <Layout>
            <Switch>
              {/* More Specific Routes First */}
              <Route exact path="/cars/new" component={CarCreatePage} />
              <Route exact path="/cars/:id/edit" component={CarEditPage} />
              <Route exact path="/cars/:id" component={CarDetailPage} />
              <Route exact path="/cars" component={CarListPage} />
              {/* Redirect unknown /cars/* routes to /cars */}
              <Redirect to="/cars" />
            </Switch>
          </Layout>
        </PrivateRoute>

        {/* Catch-all Redirect to /login */}
        <Redirect to="/login" />
      </Switch>
      <Notification /> {/* Include Notification component */}
    </>
  );
}

export default App;

================
File: App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: components/Layout.js
================
// src/components/Layout.js

import React from 'react';
import {
  AppBar,
  Toolbar,
  Typography,
  Button,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Box,
} from '@mui/material';
import { CarRental, Logout } from '@mui/icons-material';
import { Link, useHistory } from 'react-router-dom'; // Import useHistory
import { useDispatch } from 'react-redux';
import { logout } from '../store/actions/authActions';

const drawerWidth = 240;

function Layout({ children }) {
  const dispatch = useDispatch();
  const history = useHistory(); // Use useHistory instead of useNavigate

  const handleLogout = () => {
    dispatch(logout());
    history.push('/login'); // Redirect using history.push
  };

  return (
    <Box sx={{ display: 'flex', height: '100vh', overflow: 'hidden' }}>
      {/* AppBar */}
      <AppBar position="fixed" color="primary" sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <CarRental sx={{ mr: 2 }} />
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Car Management App
          </Typography>
          <Button
            color="inherit"
            onClick={handleLogout}
            sx={{
              transition: 'all 0.3s ease-in-out',
              '&:hover': {
                transform: 'scale(1.1)',
                color: 'secondary.main',
              },
            }}
            startIcon={<Logout />}
          >
            Logout
          </Button>
        </Toolbar>
      </AppBar>

      {/* Drawer */}
      <Drawer
        variant="permanent"
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          [`& .MuiDrawer-paper`]: { width: drawerWidth, boxSizing: 'border-box' },
        }}
      >
        <Toolbar />
        <Box sx={{ overflow: 'auto' }}>
          <List>
            <ListItem
              button
              component={Link}
              to="/cars"
              sx={{
                transition: 'all 0.3s ease-in-out',
                '&:hover': {
                  backgroundColor: 'primary.light',
                },
              }}
            >
              <ListItemIcon>
                <CarRental />
              </ListItemIcon>
              <ListItemText primary="My Cars" />
            </ListItem>
            <ListItem
              button
              component={Link}
              to="/cars/new"
              sx={{
                transition: 'all 0.3s ease-in-out',
                '&:hover': {
                  backgroundColor: 'primary.light',
                },
              }}
            >
              <ListItemIcon>
                <CarRental />
              </ListItemIcon>
              <ListItemText primary="Add New Car" />
            </ListItem>
          </List>
        </Box>
      </Drawer>

      {/* Main Content */}
      <Box component="main" sx={{ flexGrow: 1, p: 3 }}>
        <Toolbar />
        {children}
      </Box>
    </Box>
  );
}

export default Layout;

================
File: components/Notification.js
================
// src/components/Notification.js

import React from 'react';
import { Snackbar, Alert } from '@mui/material';
import { useSelector, useDispatch } from 'react-redux';
import { clearNotification } from '../store/actions/notificationActions';

function Notification() {
  const dispatch = useDispatch();
  const { open, message, severity } = useSelector((state) => state.notification);

  const handleClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    dispatch(clearNotification());
  };

  return (
    <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>
      <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }}>
        {message}
      </Alert>
    </Snackbar>
  );
}

export default Notification;

================
File: components/PrivateRoute.js
================
// src/components/PrivateRoute.js

import React from 'react';
import { Route, Redirect } from 'react-router-dom';
import { useSelector } from 'react-redux';

function PrivateRoute({ children, ...rest }) {
  const user = useSelector((state) => state.auth.user);

  return (
    <Route
      {...rest}
      render={({ location }) =>
        user ? (
          children
        ) : (
          <Redirect to={{ pathname: '/login', state: { from: location } }} />
        )
      }
    />
  );
}

export default PrivateRoute;

================
File: index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  overflow-y: auto; /* Allow scrolling for the entire page */
}

#root {
  height: 100%; /* Ensures React root covers the full height */
}

================
File: index.js
================
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import store from './store';
import { ThemeProvider } from '@mui/material/styles';
import theme from './theme';

ReactDOM.render(
  <Provider store={store}>
    <BrowserRouter>
      <ThemeProvider theme={theme}>
        <App />
      </ThemeProvider>
    </BrowserRouter>
  </Provider>,
  document.getElementById('root')
);

================
File: logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: pages/AddCar.js
================
// src/pages/AddCar.js

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import {
  Box,
  Button,
  Container,
  Grid,
  Typography,
  TextField,
  Alert,
  CircularProgress,
  CardMedia,
} from '@mui/material';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';
import { Formik, Form } from 'formik';
import * as Yup from 'yup';
import { addCar } from '../store/actions/carActions';

const AddCar = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const [imagePreviews, setImagePreviews] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const initialValues = {
    title: '',
    description: '',
    tags: '',
    images: [],
  };

  const validationSchema = Yup.object({
    title: Yup.string().required('Title is required'),
    description: Yup.string().required('Description is required'),
    tags: Yup.string().required('Tags are required'),
    images: Yup.mixed().required('At least one image is required'),
  });

  const handleImageChange = (e, setFieldValue) => {
    const files = Array.from(e.target.files);
    if (files.length > 10) {
      setError('You can upload up to 10 images.');
      return;
    }
    setFieldValue('images', files);

    // Generate image previews
    const previews = files.map((file) => URL.createObjectURL(file));
    setImagePreviews(previews);
  };

  const handleSubmit = async (values) => {
    const formData = new FormData();
    formData.append('title', values.title);
    formData.append('description', values.description);
    formData.append('tags', values.tags);
    values.images.forEach((image) => {
      formData.append('images', image);
    });

    try {
      setLoading(true);
      await dispatch(addCar(formData, navigate));
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to add car');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{
              transition: 'all 0.3s ease-in-out',
              '&:hover': {
                transform: 'scale(1.1)',
                color: 'secondary.main',
              },
            }}>
        <Typography variant="h4" align="center">
          Add New Car
        </Typography>
      </Box>
      {error && <Alert severity="error">{error}</Alert>}

      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, errors, touched, handleChange, setFieldValue, handleSubmit }) => (
          <Form onSubmit={handleSubmit}>
            {/* Title Field */}
            <TextField
              fullWidth
              margin="normal"
              label="Title"
              name="title"
              value={values.title}
              onChange={handleChange}
              error={touched.title && Boolean(errors.title)}
              helperText={touched.title && errors.title}
            />

            {/* Description Field */}
            <TextField
              fullWidth
              margin="normal"
              label="Description"
              name="description"
              multiline
              rows={4}
              value={values.description}
              onChange={handleChange}
              error={touched.description && Boolean(errors.description)}
              helperText={touched.description && errors.description}
            />

            {/* Tags Field */}
            <TextField
              fullWidth
              margin="normal"
              label="Tags (comma separated)"
              name="tags"
              value={values.tags}
              onChange={handleChange}
              error={touched.tags && Boolean(errors.tags)}
              helperText={touched.tags && errors.tags}
            />

            {/* Image Upload */}
            <Button
              variant="contained"
              component="label"
              startIcon={<AddPhotoAlternateIcon />}
              sx={{ mt: 2, mb: 2 }}
            >
              Upload Images
              <input
                type="file"
                hidden
                multiple
                accept="image/*"
                onChange={(e) => handleImageChange(e, setFieldValue)}
              />
            </Button>
            {touched.images && errors.images && (
              <Typography color="error" variant="body2">
                {errors.images}
              </Typography>
            )}

            {/* Image Previews */}
            {imagePreviews.length > 0 && (
              <Grid container spacing={2} sx={{ mb: 2 }}>
                {imagePreviews.map((src, index) => (
                  <Grid item xs={6} sm={4} key={index}>
                    <CardMedia
                      component="img"
                      src={src}
                      alt={`Preview ${index + 1}`}
                      sx={{
                        borderRadius: 1,
                        height: '140px',
                        objectFit: 'cover',
                      }}
                    />
                  </Grid>
                ))}
              </Grid>
            )}

            {/* Submit Button */}
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              disabled={loading}
              sx={{ mt: 3, mb: 2 }}
            >
              {loading ? <CircularProgress size={24} /> : 'Add Car'}
            </Button>
          </Form>
        )}
      </Formik>
    </Container>
  );
};

export default AddCar;

================
File: pages/CarCreatePage.js
================
// src/pages/CarCreatePage.js

import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addCar } from '../store/actions/carActions';
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  CircularProgress,
  Alert,
} from '@mui/material';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';
import { useHistory } from 'react-router-dom';

function CarCreatePage() {
  const dispatch = useDispatch();
  const history = useHistory();
  const { loading, error } = useSelector((state) => state.cars);
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    tags: '',
    images: [],
  });
  
  const [imagePreviews, setImagePreviews] = useState([]);
  
  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 10) {
      alert('You can upload up to 10 images.');
      return;
    }
    setFormData({ ...formData, images: files });
    
    // Generate image previews
    const previews = files.map((file) => URL.createObjectURL(file));
    setImagePreviews(previews);
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    const data = new FormData();
    data.append('title', formData.title);
    data.append('description', formData.description);
    data.append('tags', formData.tags);
    
    formData.images.forEach((image) => {
      data.append('images', image);
    });
    
    dispatch(addCar(data, history));
  };
  
  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4, mb: 2 }}>
        <Typography variant="h4">Add New Car</Typography>
      </Box>
      {error && <Alert severity="error">{error}</Alert>}
      <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
        <TextField
          margin="normal"
          required
          fullWidth
          label="Title"
          name="title"
          value={formData.title}
          onChange={(e) =>
            setFormData({ ...formData, title: e.target.value })
          }
        />
        <TextField
          margin="normal"
          required
          fullWidth
          label="Description"
          name="description"
          multiline
          rows={4}
          value={formData.description}
          onChange={(e) =>
            setFormData({ ...formData, description: e.target.value })
          }
        />
        <TextField
          margin="normal"
          fullWidth
          label="Tags (comma separated)"
          name="tags"
          value={formData.tags}
          onChange={(e) =>
            setFormData({ ...formData, tags: e.target.value })
          }
        />
        <Button
          variant="contained"
          component="label"
          startIcon={<AddPhotoAlternateIcon />}
          sx={{ mt: 2, mb: 2 }}
        >
          Upload Images
          <input
            type="file"
            hidden
            multiple
            accept="image/*"
            onChange={handleFileChange}
          />
        </Button>
        {imagePreviews.length > 0 && (
          <Grid container spacing={2} sx={{ mb: 2 }}>
            {imagePreviews.map((src, index) => (
              <Grid item xs={6} sm={4} key={index}>
                <Box
                  component="img"
                  src={src}
                  alt={`Preview ${index + 1}`}
                  sx={{ width: '100%', height: 'auto', borderRadius: 1 }}
                />
              </Grid>
            ))}
          </Grid>
        )}
        <Button
          type="submit"
          fullWidth
          variant="contained"
          color="primary"
          disabled={loading}
          sx={{ mt: 3, mb: 2 }}
        >
          {loading ? <CircularProgress size={24} /> : 'Create Car'}
        </Button>
      </Box>
    </Container>
  );
}

export default CarCreatePage;

================
File: pages/CarDetailPage.js
================
// src/pages/CarDetailPage.js

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchCarDetails, deleteCar } from '../store/actions/carActions';
import { Link, useHistory, useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  Button,
  Grid,
  CardMedia,
  CircularProgress,
  Alert,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
} from '@mui/material';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';

function CarDetailPage() {
  const { id } = useParams();
  const dispatch = useDispatch();
  const history = useHistory();
  const { selectedCar, loading, error } = useSelector((state) => state.cars);
  const currentUser = useSelector((state) => state.auth.user); // Get current user
  const [open, setOpen] = useState(false); // For delete confirmation

  useEffect(() => {
    dispatch(fetchCarDetails(id));
  }, [dispatch, id]);

  const handleDelete = () => {
    dispatch(deleteCar(id, history));
    setOpen(false);
  };

  if (loading || !selectedCar) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  // Determine if the current user owns the car
  const isOwner = currentUser && selectedCar.userId._id === currentUser.id;

  return (
    <Container maxWidth="md">
      <Box sx={{ mt: 4, mb: 2 }}>
        <Button
          variant="outlined"
          startIcon={<ArrowBackIcon />}
          component={Link}
          to="/cars"
        >
          Back to List
        </Button>
      </Box>
      <Typography variant="h4" gutterBottom>
        {selectedCar.title}
      </Typography>
      <Grid container spacing={4}>
        {/* Image Gallery */}
        <Grid item xs={12} md={6}>
          <Grid container spacing={2}>
            {selectedCar.images.length > 0 ? (
              selectedCar.images.map((img, index) => (
                <Grid item xs={6} key={index}>
                  <CardMedia
                    component="img"
                    height="140"
                    image={`http://localhost:5000/${img}`}

                    alt={`Car Image ${index + 1}`}
                  />
                </Grid>
              ))
            ) : (
              <Typography>No images available.</Typography>
            )}
          </Grid>
        </Grid>

        {/* Car Details */}
        <Grid item xs={12} md={6}>
          <Typography variant="h6">Description</Typography>
          <Typography paragraph>{selectedCar.description}</Typography>
          <Typography variant="h6">Tags</Typography>
          <Typography paragraph>{selectedCar.tags.join(', ')}</Typography>
          <Typography variant="h6">Owner</Typography>
          <Typography paragraph>{selectedCar.userId.username}</Typography>

          {/* Conditionally render Edit and Delete buttons */}
          {isOwner && (
            <Box sx={{ mt: 2 }}>
              <Button
                variant="contained"
                color="primary"
                startIcon={<EditIcon />}
                component={Link}
                to={`/cars/${id}/edit`}
                sx={{ mr: 2 }}
              >
                Edit
              </Button>
              <Button
                variant="outlined"
                color="error"
                startIcon={<DeleteIcon />}
                onClick={() => setOpen(true)}
              >
                Delete
              </Button>
            </Box>
          )}
        </Grid>
      </Grid>

      {/* Delete Confirmation Dialog */}
      <Dialog
        open={open}
        onClose={() => setOpen(false)}
        aria-labelledby="delete-dialog-title"
        aria-describedby="delete-dialog-description"
      >
        <DialogTitle id="delete-dialog-title">Delete Car</DialogTitle>
        <DialogContent>
          <DialogContentText id="delete-dialog-description">
            Are you sure you want to delete this car? This action cannot be undone.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Cancel</Button>
          <Button onClick={handleDelete} color="error" variant="contained">
            Delete
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}

export default CarDetailPage;

================
File: pages/CarEditPage.js
================
// src/pages/CarEditPage.js

import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchCarDetails, updateCar } from '../store/actions/carActions';
import { useHistory, useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Grid,
  CircularProgress,
  Alert,
} from '@mui/material';
import AddPhotoAlternateIcon from '@mui/icons-material/AddPhotoAlternate';

function CarEditPage() {
  const { id } = useParams();
  const dispatch = useDispatch();
  const history = useHistory();
  const { selectedCar, loading, error } = useSelector((state) => state.cars);
  const currentUser = useSelector((state) => state.auth.user);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    tags: '',
    images: [],
  });
  const [imagePreviews, setImagePreviews] = useState([]);

  useEffect(() => {
    dispatch(fetchCarDetails(id));
  }, [dispatch, id]);

  useEffect(() => {
    if (selectedCar) {
      // Check if the current user is the owner
      if (selectedCar.userId._id !== currentUser.id) {
        history.push(`/cars/${id}`);
      } else {
        setFormData({
          title: selectedCar.title,
          description: selectedCar.description,
          tags: selectedCar.tags.join(', '),
          images: [],
        });
        setImagePreviews([]);
      }
    }
  }, [selectedCar, currentUser, history, id]);

  const handleFileChange = (e) => {
    const files = Array.from(e.target.files);
    if (files.length + selectedCar.images.length > 10) {
      alert('You can upload up to 10 images.');
      return;
    }
    setFormData({ ...formData, images: files });

    // Generate image previews
    const previews = files.map((file) => URL.createObjectURL(file));
    setImagePreviews(previews);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const data = new FormData();
    data.append('title', formData.title);
    data.append('description', formData.description);
    data.append('tags', formData.tags);

    formData.images.forEach((image) => {
      data.append('images', image);
    });

    dispatch(updateCar(id, data, history));
  };

  if (loading || !selectedCar) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4, mb: 2 }}>
        <Typography variant="h4">Edit Car</Typography>
      </Box>
      {error && <Alert severity="error">{error}</Alert>}
      <Box component="form" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>
        <TextField
          margin="normal"
          required
          fullWidth
          label="Title"
          name="title"
          value={formData.title}
          onChange={(e) =>
            setFormData({ ...formData, title: e.target.value })
          }
        />
        <TextField
          margin="normal"
          required
          fullWidth
          label="Description"
          name="description"
          multiline
          rows={4}
          value={formData.description}
          onChange={(e) =>
            setFormData({ ...formData, description: e.target.value })
          }
        />
        <TextField
          margin="normal"
          fullWidth
          label="Tags (comma separated)"
          name="tags"
          value={formData.tags}
          onChange={(e) =>
            setFormData({ ...formData, tags: e.target.value })
          }
        />
        <Button
          variant="contained"
          component="label"
          startIcon={<AddPhotoAlternateIcon />}
          sx={{ mt: 2, mb: 2 }}
        >
          Upload Additional Images
          <input
            type="file"
            hidden
            multiple
            accept="image/*"
            onChange={handleFileChange}
          />
        </Button>
        {imagePreviews.length > 0 && (
          <Grid container spacing={2} sx={{ mb: 2 }}>
            {imagePreviews.map((src, index) => (
              <Grid item xs={6} sm={4} key={index}>
                <Box
                  component="img"
                  src={src}
                  alt={`Preview ${index + 1}`}
                  sx={{ width: '100%', height: 'auto', borderRadius: 1 }}
                />
              </Grid>
            ))}
          </Grid>
        )}
        <Typography variant="h6">Existing Images</Typography>
        <Grid container spacing={2} sx={{ mb: 2 }}>
          {selectedCar.images.length > 0 ? (
            selectedCar.images.map((img, index) => (
              <Grid item xs={6} sm={4} key={index}>
                <Box
                  component="img"
                  src={`http://localhost:5000/${img}`}
                  alt={`Car Image ${index + 1}`}
                  sx={{ width: '100%', height: 'auto', borderRadius: 1 }}
                />
              </Grid>
            ))
          ) : (
            <Typography>No images available.</Typography>
          )}
        </Grid>
        <Button
          type="submit"
          fullWidth
          variant="contained"
          color="primary"
          disabled={loading}
          sx={{ mt: 3, mb: 2 }}
        >
          {loading ? <CircularProgress size={24} /> : 'Update Car'}
        </Button>
      </Box>
    </Container>
  );
}

export default CarEditPage;

================
File: pages/CarListPage.js
================
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchCars } from '../store/actions/carActions';
import { Link, useHistory } from 'react-router-dom';
import {
  Container,
  Box,
  Typography,
  TextField,
  Grid,
  Card,
  CardMedia,
  CardContent,
  CircularProgress,
  Alert,
  Pagination,
  ToggleButton,
  ToggleButtonGroup,
} from '@mui/material';

function CarListPage() {
  const dispatch = useDispatch();
  const history = useHistory();
  const { cars, loading, error, totalPages, currentPage } = useSelector((state) => state.cars);

  const [search, setSearch] = useState('');
  const [page, setPage] = useState(1);
  const [myCarsOnly, setMyCarsOnly] = useState(true); // Default selection to "My Cars"

  useEffect(() => {
    dispatch(fetchCars(search, page, 6, myCarsOnly));
  }, [dispatch, search, page, myCarsOnly]);

  const handleCardClick = (id) => {
    history.push(`/cars/${id}`);
  };

  const handlePageChange = (event, value) => {
    setPage(value);
  };

  const handleToggleChange = (event, newValue) => {
    if (newValue !== null) {
      setMyCarsOnly(newValue === 'my');
      setPage(1); // Reset to first page when toggling
    }
  };

  return (
    <Container
      maxWidth="lg"
      sx={{
        height: 'calc(100vh - 100px)', // Allow space for header/footer
        overflowY: 'auto', // Enable vertical scrolling
        padding: '16px',
      }}
    >
      <Box sx={{ mb: 2 }}>
        <Typography variant="h4" align="center" gutterBottom>
          {myCarsOnly ? 'My Cars' : 'All Cars'}
        </Typography>
      </Box>

      {/* Toggle Button Group */}
      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'center' }}>
        <ToggleButtonGroup
          value={myCarsOnly ? 'my' : 'all'} // Reflect default selection
          exclusive
          onChange={handleToggleChange}
          aria-label="Car Filter"
          sx={{ mb: 2 }}
        >
          <ToggleButton value="my" aria-label="My Cars">
            My Cars
          </ToggleButton>
          <ToggleButton value="all" aria-label="All Cars">
            All Cars
          </ToggleButton>
        </ToggleButtonGroup>
      </Box>

      {/* Search Bar */}
      <Box sx={{ mb: 4, display: 'flex', justifyContent: 'center' }}>
        <TextField
          variant="outlined"
          placeholder="Search Cars..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          sx={{
            width: '100%',
            maxWidth: '400px',
            borderRadius: '50px',
            backgroundColor: '#fff',
            boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)',
          }}
        />
      </Box>

      {/* Loading and Error States */}
      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <CircularProgress />
        </Box>
      ) : error ? (
        <Alert severity="error">{error}</Alert>
      ) : cars.length === 0 ? (
        <Typography variant="h6" align="center" color="text.secondary">
          No cars found. Try searching for something else or add a new car!
        </Typography>
      ) : (
        <Grid container spacing={4}>
          {cars.map((car) => (
            <Grid item key={car._id} xs={12} sm={6} md={4}>
              <Card
                onClick={() => handleCardClick(car._id)}
                sx={{
                  cursor: 'pointer',
                  transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                  '&:hover': {
                    transform: 'scale(1.05)',
                    boxShadow: '0 8px 20px rgba(0, 0, 0, 0.2)',
                  },
                }}
              >
                <CardMedia
                  component="img"
                  height="200"
                  image={
                    car.images[0]
                      ? `http://localhost:5000/${car.images[0]}`
                      : 'https://via.placeholder.com/200'
                  }
                  alt={car.title}
                  sx={{ borderRadius: '4px' }}
                />
                <CardContent>
                  <Typography gutterBottom variant="h5" component="div">
                    {car.title}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {car.description.substring(0, 100)}...
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <Pagination
            count={totalPages}
            page={page}
            onChange={handlePageChange}
            color="primary"
            size="large"
          />
        </Box>
      )}
    </Container>
  );
}

export default CarListPage;

================
File: pages/EditCar.js
================
// frontend/src/pages/EditCar.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { getToken } from '../services/api';

const EditCar = () => {
  const { id } = useParams();
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [tags, setTags] = useState({
    car_type: '',
    company: '',
    dealer: '',
  });
  const [images, setImages] = useState([]);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const fetchCar = async () => {
    try {
      const res = await axios.get(`/api/cars/${id}`, {
        headers: { Authorization: `Bearer ${getToken()}` },
      });
      setTitle(res.data.title);
      setDescription(res.data.description);
      setTags(res.data.tags);
    } catch (err) {
      setError('Failed to fetch car details');
    }
  };

  useEffect(() => {
    fetchCar();
    // eslint-disable-next-line
  }, []);

  const handleImageChange = (e) => {
    if (e.target.files.length > 10) {
      setError('You can upload up to 10 images');
      return;
    }
    setImages(e.target.files);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData();
    formData.append('title', title);
    formData.append('description', description);
    formData.append('tags', JSON.stringify(tags));
    for (let i = 0; i < images.length; i++) {
      formData.append('images', images[i]);
    }

    try {
      await axios.put(`/api/cars/${id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${getToken()}`,
        },
      });
      navigate(`/cars/${id}`);
    } catch (err) {
      setError(err.response.data.message || 'Failed to update car');
    }
  };

  return (
    <div className="edit-car-container">
      <h2>Edit Car</h2>
      {error && <p className="error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <div>
          <label>Title:</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div>
          <label>Description:</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
          ></textarea>
        </div>
        <div>
          <label>Tags:</label>
          <input
            type="text"
            placeholder="Car Type"
            value={tags.car_type}
            onChange={(e) => setTags({ ...tags, car_type: e.target.value })}
          />
          <input
            type="text"
            placeholder="Company"
            value={tags.company}
            onChange={(e) => setTags({ ...tags, company: e.target.value })}
          />
          <input
            type="text"
            placeholder="Dealer"
            value={tags.dealer}
            onChange={(e) => setTags({ ...tags, dealer: e.target.value })}
          />
        </div>
        <div>
          <label>Images (up to 10):</label>
          <input
            type="file"
            multiple
            accept="image/*"
            onChange={handleImageChange}
          />
        </div>
        <button type="submit">Update Car</button>
      </form>
    </div>
  );
};

export default EditCar;

================
File: pages/LoginPage.css
================
/* src/pages/LoginPage.css */

/* Prevent scrolling on the page */
body {
    margin: 0;
    padding: 0;
    overflow: hidden; /* Disable scrolling */
    font-family: 'Roboto', sans-serif;
  }
  
  /* Full-screen container */
  .login-page {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #000; /* Fallback color for unsupported video */
  }
  
  /* Background Video */
  .background-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover; /* Ensures the video covers the entire background */
    z-index: 0;
    filter: brightness(60%); /* Dim the video slightly for better readability */
  }
  
  /* Login Form Container */
  .login-form-container {
    position: relative;
    z-index: 2; /* Ensure the form is above the video */
    backdrop-filter: blur(8px); /* Adds a subtle blur for the glassmorphism effect */
    border-radius: 16px;
  }

================
File: pages/LoginPage.js
================
// src/pages/LoginPage.js

import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { login } from '../store/actions/authActions';
import { Formik, Form } from 'formik';
import {
  Box,
  Button,
  Container,
  Typography,
  TextField,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  CardMedia,
} from '@mui/material';
import { styled } from '@mui/system';
import * as Yup from 'yup';
import './LoginPage.css'; // Import CSS for styles

const StyledTextField = styled(TextField)({
  marginTop: '16px',
  '& .MuiInputBase-root': {
    transition: 'border-color 0.3s ease-in-out',
  },
  '& .MuiInputLabel-root': {
    color: '#666', // Neutral label color
    fontSize: '14px', // Smaller label size for professionalism
    fontWeight: 500,
  },
  '& .MuiOutlinedInput-notchedOutline': {
    borderColor: '#ddd', // Subtle border
  },
  '& .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline': {
    borderColor: '#007aff', // Highlight on hover
  },
});

const LoginSchema = Yup.object().shape({
  email: Yup.string().email('Invalid email').required('Required'),
  password: Yup.string().required('Required'),
});

const LoginPage = ({ history }) => {
  const dispatch = useDispatch();
  const { loading, error } = useSelector((state) => state.auth);

  const handleSubmit = (values) => {
    dispatch(login(values, history));
  };

  return (
    <Box className="login-page">
      {/* Background Video */}
      <video autoPlay loop muted playsInline className="background-video">
        <source src={`${process.env.PUBLIC_URL}/promo.mp4`} type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Login Form */}
      <Container
        component="main"
        maxWidth="xs"
        className="login-form-container"
      >
        <Card
          sx={{
            padding: '32px',
            borderRadius: '16px',
            background: 'rgba(255, 255, 255, 0.75)', // Semi-transparent background
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
          }}
        >
          <CardContent>
            {/* Logo */}
            <CardMedia
              component="img"
              image={`${process.env.PUBLIC_URL}/logo.png`}
              alt="App Logo"
              sx={{
                height: 100,
                width: 100,
                margin: '0 auto 16px',
                borderRadius: '50%',
              }}
            />

            <Typography
              component="h1"
              variant="h5"
              sx={{ textAlign: 'center', marginBottom: '24px' }}
            >
              Welcome Back
            </Typography>

            {/* Error Message */}
            {error && (
              <Alert severity="error" sx={{ marginBottom: '16px' }}>
                {error}
              </Alert>
            )}

            {/* Login Form */}
            <Formik
              initialValues={{ email: '', password: '' }}
              validationSchema={LoginSchema}
              onSubmit={handleSubmit}
            >
              {({ errors, touched, handleChange, values }) => (
                <Form>
                  <StyledTextField
                    fullWidth
                    id="email"
                    name="email"
                    label="Email Address"
                    variant="outlined"
                    value={values.email}
                    onChange={handleChange}
                    error={touched.email && Boolean(errors.email)}
                    helperText={touched.email && errors.email}
                  />
                  <StyledTextField
                    fullWidth
                    id="password"
                    name="password"
                    label="Password"
                    type="password"
                    variant="outlined"
                    value={values.password}
                    onChange={handleChange}
                    error={touched.password && Boolean(errors.password)}
                    helperText={touched.password && errors.password}
                  />
                  <Button
                    type="submit"
                    fullWidth
                    variant="contained"
                    color="primary"
                    disabled={loading}
                    sx={{
                      marginTop: '24px',
                      height: '48px',
                      fontSize: '16px',
                      fontWeight: 'bold',
                      textTransform: 'none',
                    }}
                  >
                    {loading ? <CircularProgress size={24} /> : 'Login'}
                  </Button>
                </Form>
              )}
            </Formik>

            {/* Redirect to Register */}
            <Typography
              variant="body2"
              sx={{ textAlign: 'center', marginTop: '16px' }}
            >
              Don't have an account?{' '}
              <Button
                variant="text"
                color="primary"
                onClick={() => history.push('/register')}
                sx={{ fontSize: '14px', textTransform: 'none' }}
              >
                Register
              </Button>
            </Typography>
          </CardContent>
        </Card>
      </Container>
    </Box>
  );
};

export default LoginPage;

================
File: pages/RegisterPage.css
================
/* src/pages/RegisterPage.css */

/* Prevent scrolling */
body {
    margin: 0;
    padding: 0;
    overflow: hidden; /* Disable scrolling */
    font-family: 'Roboto', sans-serif;
  }
  
  /* Full-screen container */
  .register-page {
    position: relative;
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  /* Background Video */
  .background-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover; /* Ensures the video covers the entire background */
    z-index: 0;
    filter: brightness(60%); /* Dim the video slightly for better readability */
  }
  
  /* Register Form Container */
  .register-form-container {
    position: relative;
    z-index: 2; /* Ensure the form is above the video */
    backdrop-filter: blur(8px); /* Adds a subtle blur for the glassmorphism effect */
    border-radius: 16px;
  }

================
File: pages/RegisterPage.js
================
// src/pages/RegisterPage.js

import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { register } from '../store/actions/authActions';
import { Formik, Form } from 'formik';
import {
  Box,
  Button,
  Container,
  Typography,
  TextField,
  CircularProgress,
  Alert,
  Card,
  CardContent,
  CardMedia,
} from '@mui/material';
import { styled } from '@mui/system';
import * as Yup from 'yup';
import './RegisterPage.css'; // Import CSS for styles

const StyledTextField = styled(TextField)({
  marginTop: '16px',
  '& .MuiInputBase-root': {
    transition: 'border-color 0.3s ease-in-out',
  },
  '& .MuiInputLabel-root': {
    color: '#666', // Neutral label color
    fontSize: '14px', // Smaller label size for professionalism
    fontWeight: 500,
  },
  '& .MuiOutlinedInput-notchedOutline': {
    borderColor: '#ddd', // Subtle border
  },
  '& .MuiOutlinedInput-root:hover .MuiOutlinedInput-notchedOutline': {
    borderColor: '#007aff', // Highlight on hover
  },
});

const RegisterSchema = Yup.object().shape({
  username: Yup.string().required('Username is required'),
  email: Yup.string().email('Invalid email').required('Email is required'),
  password: Yup.string().required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password'), null], 'Passwords must match')
    .required('Confirm password is required'),
});

const RegisterPage = ({ history }) => {
  const dispatch = useDispatch();
  const { loading, error } = useSelector((state) => state.auth);

  const handleSubmit = (values) => {
    dispatch(register(values, history));
  };

  return (
    <Box className="register-page">
      {/* Background Video */}
      <video autoPlay loop muted playsInline className="background-video">
        <source src={`${process.env.PUBLIC_URL}/promo.mp4`} type="video/mp4" />
        Your browser does not support the video tag.
      </video>

      {/* Register Form */}
      <Container
        component="main"
        maxWidth="xs"
        className="register-form-container"
      >
        <Card
          sx={{
            padding: '32px',
            borderRadius: '16px',
            background: 'rgba(255, 255, 255, 0.75)', // Semi-transparent background
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
          }}
        >
          <CardContent>
            {/* Logo */}
            <CardMedia
              component="img"
              image={`${process.env.PUBLIC_URL}/logo.png`}
              alt="App Logo"
              sx={{
                height: 100,
                width: 100,
                margin: '0 auto 16px',
                borderRadius: '50%',
              }}
            />

            <Typography
              component="h1"
              variant="h5"
              sx={{ textAlign: 'center', marginBottom: '24px' }}
            >
              Create Your Account
            </Typography>

            {/* Error Message */}
            {error && (
              <Alert severity="error" sx={{ marginBottom: '16px' }}>
                {error}
              </Alert>
            )}

            {/* Register Form */}
            <Formik
              initialValues={{
                username: '',
                email: '',
                password: '',
                confirmPassword: '',
              }}
              validationSchema={RegisterSchema}
              onSubmit={handleSubmit}
            >
              {({ errors, touched, handleChange, values }) => (
                <Form>
                  <StyledTextField
                    fullWidth
                    id="username"
                    name="username"
                    label="Username"
                    variant="outlined"
                    value={values.username}
                    onChange={handleChange}
                    error={touched.username && Boolean(errors.username)}
                    helperText={touched.username && errors.username}
                  />
                  <StyledTextField
                    fullWidth
                    id="email"
                    name="email"
                    label="Email Address"
                    variant="outlined"
                    value={values.email}
                    onChange={handleChange}
                    error={touched.email && Boolean(errors.email)}
                    helperText={touched.email && errors.email}
                  />
                  <StyledTextField
                    fullWidth
                    id="password"
                    name="password"
                    label="Password"
                    type="password"
                    variant="outlined"
                    value={values.password}
                    onChange={handleChange}
                    error={touched.password && Boolean(errors.password)}
                    helperText={touched.password && errors.password}
                  />
                  <StyledTextField
                    fullWidth
                    id="confirmPassword"
                    name="confirmPassword"
                    label="Confirm Password"
                    type="password"
                    variant="outlined"
                    value={values.confirmPassword}
                    onChange={handleChange}
                    error={
                      touched.confirmPassword && Boolean(errors.confirmPassword)
                    }
                    helperText={
                      touched.confirmPassword && errors.confirmPassword
                    }
                  />
                  <Button
                    type="submit"
                    fullWidth
                    variant="contained"
                    color="primary"
                    disabled={loading}
                    sx={{
                      marginTop: '24px',
                      height: '48px',
                      fontSize: '16px',
                      fontWeight: 'bold',
                      textTransform: 'none',
                    }}
                  >
                    {loading ? <CircularProgress size={24} /> : 'Register'}
                  </Button>
                </Form>
              )}
            </Formik>

            {/* Redirect to Login */}
            <Typography
              variant="body2"
              sx={{ textAlign: 'center', marginTop: '16px' }}
            >
              Already have an account?{' '}
              <Button
                variant="text"
                color="primary"
                onClick={() => history.push('/login')}
                sx={{ fontSize: '14px', textTransform: 'none' }}
              >
                Login
              </Button>
            </Typography>
          </CardContent>
        </Card>
      </Container>
    </Box>
  );
};

export default RegisterPage;

================
File: reducers/authReducer.js
================
const initialState = {
  user: null,
  loading: false,
  error: null,
};

export default function authReducer(state = initialState, action) {
  switch(action.type) {
    case 'LOGIN_REQUEST':
    case 'REGISTER_REQUEST':
      return { ...state, loading: true, error: null };
    case 'LOGIN_SUCCESS':
      return { ...state, loading: false, user: action.payload };
    case 'REGISTER_SUCCESS':
      return { ...state, loading: false };
    case 'LOGIN_FAILURE':
    case 'REGISTER_FAILURE':
      return { ...state, loading: false, error: action.payload };
    case 'LOGOUT':
      return initialState;
    default:
      return state;
  }
}

================
File: reducers/carReducer.js
================
const initialState = {
  cars: [],
  selectedCar: null,
  loading: false,
  error: null,
};

export default function carReducer(state = initialState, action) {
  switch (action.type) {
    case 'FETCH_CARS_REQUEST':
    case 'FETCH_CAR_DETAILS_REQUEST':
    case 'ADD_CAR_REQUEST':
    case 'UPDATE_CAR_REQUEST':
    case 'DELETE_CAR_REQUEST':
      return { ...state, loading: true, error: null };
    case 'FETCH_CARS_SUCCESS':
      return { ...state, loading: false, cars: action.payload };
    case 'FETCH_CAR_DETAILS_SUCCESS':
      return { ...state, loading: false, selectedCar: action.payload };
    case 'ADD_CAR_SUCCESS':
      return { ...state, loading: false, cars: [...state.cars, action.payload] };
    case 'UPDATE_CAR_SUCCESS':
      return {
        ...state,
        loading: false,
        cars: state.cars.map(car => 
          car._id === action.payload._id ? action.payload : car
        ),
        selectedCar: action.payload,
      };
    case 'DELETE_CAR_SUCCESS':
      return {
        ...state,
        loading: false,
        cars: state.cars.filter(car => car._id !== action.payload),
        selectedCar: null,
      };
    case 'FETCH_CARS_FAILURE':
    case 'FETCH_CAR_DETAILS_FAILURE':
    case 'ADD_CAR_FAILURE':
    case 'UPDATE_CAR_FAILURE':
    case 'DELETE_CAR_FAILURE':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
}

================
File: reducers/notificationReducer.js
================
// src/store/reducers/notificationReducer.js

const initialState = {
  open: false,
  message: '',
  severity: 'success', // Options: 'error', 'warning', 'info', 'success'
};

export default function notificationReducer(state = initialState, action) {
  switch (action.type) {
    case 'SHOW_NOTIFICATION':
      return {
        open: true,
        message: action.payload.message,
        severity: action.payload.severity,
      };
    case 'CLEAR_NOTIFICATION':
      return initialState;
    default:
      return state;
  }
}

================
File: services/api.js
================
// src/services/api.js

import axios from 'axios';

// Create an instance of axios
const API = axios.create({
  baseURL: process.env.REACT_APP_API_BASE_URL || 'http://localhost:5000/api',
});

// Add a request interceptor to include the token
API.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token'); // Retrieve the token from localStorage
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`; // Set the Authorization header
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default API;

================
File: store/actions/authActions.js
================
// src/store/actions/authActions.js

import API from '../../services/api';
import { showNotification } from './notificationActions';

// Login Action
export const login = (formData, history) => async (dispatch) => {
  dispatch({ type: 'LOGIN_REQUEST' });
  try {
    const res = await API.post('/users/login', formData);
    localStorage.setItem('token', res.data.token); // Save token to localStorage
    dispatch({ type: 'LOGIN_SUCCESS', payload: res.data.user });
    dispatch(showNotification('Logged in successfully!', 'success'));
    history.push('/cars'); // Redirect to /cars
  } catch (error) {
    dispatch({
      type: 'LOGIN_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

// Register Action
export const register = (formData, history) => async (dispatch) => {
  dispatch({ type: 'REGISTER_REQUEST' });
  try {
    const res = await API.post('/users/register', formData);
    dispatch({ type: 'REGISTER_SUCCESS' });
    dispatch(showNotification('Registered successfully! Please login.', 'success'));
    history.push('/login'); // Redirect to /login
  } catch (error) {
    dispatch({
      type: 'REGISTER_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

// Logout Action
export const logout = () => (dispatch) => {
  localStorage.removeItem('token'); // Remove token from localStorage
  dispatch({ type: 'LOGOUT' });
  dispatch(showNotification('Logged out successfully!', 'success'));
};


export const setUserFromStorage = (user) => ({
  type: 'LOGIN_SUCCESS',
  payload: user,
});

================
File: store/actions/carActions.js
================
import API from '../../services/api';
import { showNotification } from './notificationActions';

// Fetch Cars Action (with My Cars Filter)
export const fetchCars = (searchTerm = '', page = 1, limit = 6, myCarsOnly = false) => async (dispatch) => {
  dispatch({ type: 'FETCH_CARS_REQUEST' });
  try {
    const res = await API.get('/cars', {
      params: { search: searchTerm, page, limit, myCars: myCarsOnly },
    });
    dispatch({ type: 'FETCH_CARS_SUCCESS', payload: res.data });
  } catch (error) {
    dispatch({
      type: 'FETCH_CARS_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(
      showNotification(
        error.response ? error.response.data.message : error.message,
        'error'
      )
    );
  }
};

// Fetch Car Details Action
export const fetchCarDetails = (id) => async (dispatch) => {
  dispatch({ type: 'FETCH_CAR_DETAILS_REQUEST' });
  try {
    const res = await API.get(`/cars/${id}`);
    dispatch({ type: 'FETCH_CAR_DETAILS_SUCCESS', payload: res.data });
  } catch (error) {
    dispatch({
      type: 'FETCH_CAR_DETAILS_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

// Add Car Action
export const addCar = (formData, history) => async (dispatch) => {
  dispatch({ type: 'ADD_CAR_REQUEST' });
  try {
    const res = await API.post('/cars', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    dispatch({ type: 'ADD_CAR_SUCCESS', payload: res.data });
    dispatch(showNotification('Car added successfully!', 'success'));
    history.push('/cars'); // Redirect to /cars
  } catch (error) {
    dispatch({
      type: 'ADD_CAR_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

// Update Car Action
export const updateCar = (id, formData, history) => async (dispatch) => {
  dispatch({ type: 'UPDATE_CAR_REQUEST' });
  try {
    const res = await API.put(`/cars/${id}`, formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
    dispatch({ type: 'UPDATE_CAR_SUCCESS', payload: res.data });
    dispatch(showNotification('Car updated successfully!', 'success'));
    history.push(`/cars/${id}`); // Redirect to car detail
  } catch (error) {
    dispatch({
      type: 'UPDATE_CAR_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

// Delete Car Action
export const deleteCar = (id, history) => async (dispatch) => {
  dispatch({ type: 'DELETE_CAR_REQUEST' });
  try {
    await API.delete(`/cars/${id}`);
    dispatch({ type: 'DELETE_CAR_SUCCESS', payload: id });
    dispatch(showNotification('Car deleted successfully!', 'success'));
    history.push('/cars'); // Redirect to /cars
  } catch (error) {
    dispatch({
      type: 'DELETE_CAR_FAILURE',
      payload: error.response ? error.response.data.message : error.message,
    });
    dispatch(showNotification(error.response ? error.response.data.message : error.message, 'error'));
  }
};

================
File: store/actions/notificationActions.js
================
// src/store/actions/notificationActions.js

export const showNotification = (message, severity = 'success') => ({
    type: 'SHOW_NOTIFICATION',
    payload: { message, severity },
  });
  
  export const clearNotification = () => ({
    type: 'CLEAR_NOTIFICATION',
  });

================
File: store/index.js
================
import { createStore, applyMiddleware, combineReducers } from 'redux';
import thunk from 'redux-thunk';
import { composeWithDevTools } from 'redux-devtools-extension';

import authReducer from './reducers/authReducer';
import carReducer from './reducers/carReducer';
import notificationReducer from './reducers/notificationReducer';

const rootReducer = combineReducers({
  auth: authReducer,
  cars: carReducer,
  notification: notificationReducer,
});

const store = createStore(
  rootReducer,
  composeWithDevTools(applyMiddleware(thunk))
);

export default store;

================
File: store/reducers/authReducer.js
================
// src/store/reducers/authReducer.js

const initialState = {
    user: null,
    loading: false,
    error: null,
  };
  
  export default function authReducer(state = initialState, action) {
    switch(action.type) {
      case 'LOGIN_REQUEST':
      case 'REGISTER_REQUEST':
        return { ...state, loading: true, error: null };
      case 'LOGIN_SUCCESS':
        return { ...state, loading: false, user: action.payload };
      case 'REGISTER_SUCCESS':
        return { ...state, loading: false };
      case 'LOGIN_FAILURE':
      case 'REGISTER_FAILURE':
        return { ...state, loading: false, error: action.payload };
      case 'LOGOUT':
        return initialState;
      default:
        return state;
    }
  }

================
File: store/reducers/carReducer.js
================
const initialState = {
  cars: [],
  selectedCar: null,
  loading: false,
  error: null,
  totalPages: 1,
  currentPage: 1,
};

export default function carReducer(state = initialState, action) {
  switch (action.type) {
    case 'FETCH_CARS_REQUEST':
    case 'FETCH_CAR_DETAILS_REQUEST':
    case 'ADD_CAR_REQUEST':
    case 'UPDATE_CAR_REQUEST':
    case 'DELETE_CAR_REQUEST':
      return { ...state, loading: true, error: null };
    case 'FETCH_CARS_SUCCESS':
      return {
        ...state,
        loading: false,
        cars: action.payload.docs,
        totalPages: action.payload.totalPages,
        currentPage: action.payload.page,
      };
    case 'FETCH_CAR_DETAILS_SUCCESS':
      return { ...state, loading: false, selectedCar: action.payload };
      case 'ADD_CAR_SUCCESS':
        return { ...state, loading: false, cars: [...state.cars, action.payload] };
      case 'UPDATE_CAR_SUCCESS':
        return {
          ...state,
          loading: false,
          cars: state.cars.map(car => 
            car._id === action.payload._id ? action.payload : car
          ),
          selectedCar: action.payload,
        };
      case 'DELETE_CAR_SUCCESS':
        return {
          ...state,
          loading: false,
          cars: state.cars.filter(car => car._id !== action.payload),
          selectedCar: null,
        };
      case 'FETCH_CARS_FAILURE':
      case 'FETCH_CAR_DETAILS_FAILURE':
      case 'ADD_CAR_FAILURE':
      case 'UPDATE_CAR_FAILURE':
      case 'DELETE_CAR_FAILURE':
        return { ...state, loading: false, error: action.payload };
      default:
        return state;
    }
  }

================
File: store/reducers/notificationReducer.js
================
// src/store/reducers/notificationReducer.js

const initialState = {
  open: false,
  message: '',
  severity: 'success', // Options: 'error', 'warning', 'info', 'success'
};

export default function notificationReducer(state = initialState, action) {
  switch (action.type) {
    case 'SHOW_NOTIFICATION':
      return {
        open: true,
        message: action.payload.message,
        severity: action.payload.severity,
      };
    case 'CLEAR_NOTIFICATION':
      return initialState;
    default:
      return state;
  }
}

================
File: theme.js
================
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: { main: '#000000' }, // Black for Uber's theme
    secondary: { main: '#007aff' }, // Blue accent
    background: { default: '#f5f5f5' }, // Light gray
  },
  typography: {
    fontFamily: 'Roboto, Arial, sans-serif',
    h1: { fontSize: '2.5rem', fontWeight: 700 },
    body1: { fontSize: '1rem', lineHeight: 1.6 },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 8,
          textTransform: 'none',
          transition: 'all 0.3s ease-in-out',
          '&:hover': {
            transform: 'scale(1.05)',
          },
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 16,
          boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)',
        },
      },
    },
  },
});

export default theme;
